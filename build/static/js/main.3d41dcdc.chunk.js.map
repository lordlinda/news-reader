{"version":3,"sources":["services/api.js","styles/StoryStyles.js","mappers/mapTime.js","components/Story.js","styles/StoriesContainerStyles.js","hooks/useInfiniteScroll.js","constants/index.js","utils/debounce.js","graphql/get-all-articles.js","containers/StoriesContainer.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","StoryWrapper","styled","section","StoryTitle","h1","StoryMeta","div","StoryMetaElement","span","props","color","mapTime","timestamp","seconds","Math","floor","Date","interval","Story","story","url","data-testid","href","title","by","time","GlobalStyle","createGlobalStyle","StoriesContainerWrapper","main","useInfiniteScroll","useState","loading","setLoading","count","setCount","handleScroll","func","wait","immediate","args","timeout","context","callNow","clearTimeout","setTimeout","apply","debounce","window","innerHeight","document","documentElement","scrollTop","offsetHeight","useEffect","addEventListener","removeEventListener","GET_ALL_ARTICLES","gql","StoriesContainer","useQuery","data","allArticles","console","log","data-test-id","slice","map","id","require","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","cache","InMemoryCache","uri","ReactDOM","render","getElementById"],"mappings":"oLAIaA,G,kBAAU,0C,GACG,UAAMA,EAAN,mBACL,UAAMA,EAAN,S,67BCJd,IAAMC,EAAeC,IAAOC,QAAV,KAeZC,EAAaF,IAAOG,GAAV,KAcVC,EAAYJ,IAAOK,IAAV,KAiBTC,EAAmBN,IAAOO,KAAV,KAElB,SAACC,GAAD,OAAWA,EAAMC,SClDfC,EAAU,SAACC,GACtB,IAAMC,EAAUC,KAAKC,OAAO,IAAIC,KAAqB,IAAZJ,GAAoB,KAEzDK,EAAWH,KAAKC,MAAMF,EAAU,SAEpC,OAAII,EAAW,EACP,GAAN,OAAUA,EAAV,WAEFA,EAAWH,KAAKC,MAAMF,EAAU,SAEjB,EACP,GAAN,OAAUI,EAAV,YAEFA,EAAWH,KAAKC,MAAMF,EAAU,QAEjB,EACP,GAAN,OAAUI,EAAV,UAEFA,EAAWH,KAAKC,MAAMF,EAAU,OAEjB,EACP,GAAN,OAAUI,EAAV,WAEFA,EAAWH,KAAKC,MAAMF,EAAU,KAEjB,EACP,GAAN,OAAUI,EAAV,YAGI,GAAN,OAAUH,KAAKC,MAAMF,GAArB,aCDaK,MAnBf,YAA2B,IAAVC,EAAS,EAATA,MACf,OAAOA,GAASA,EAAMC,IACpB,eAACpB,EAAD,CAAcqB,cAAY,QAA1B,UACE,cAAClB,EAAD,UACE,mBAAGmB,KAAMH,EAAMC,IAAf,SAAqBD,EAAMI,UAE7B,eAAClB,EAAD,WACE,uBAAMgB,cAAY,WAAlB,UACE,cAACd,EAAD,CAAkBG,MAAM,OAAxB,iBADF,IACyDS,EAAMK,MAE/D,uBAAMH,cAAY,aAAlB,UACE,cAACd,EAAD,CAAkBG,MAAM,OAAxB,qBADF,QAEGC,EAAQQ,EAAMM,eAInB,M,0nBCvBC,IAAMC,EAAcC,YAAH,KA0BXC,EAA0B3B,IAAO4B,KAAV,K,QCvBvBC,EAAoB,WAAO,IAAD,EACPC,oBAAS,GADF,mBAC9BC,EAD8B,KACrBC,EADqB,OAEXF,mBCNG,IDIQ,mBAE9BG,EAF8B,KAEvBC,EAFuB,KAI/BC,EETgB,SAACC,EAAMC,EAAMC,EAAWC,GAC9C,IAAIC,EAEJ,OAAO,WACL,IAAMC,O,EACAC,EAAUJ,IAAcE,EAM9BG,aAAaH,GACbA,EAAUI,YANI,WACZJ,EAAU,KACLF,GAAWF,EAAKS,MAAMJ,EAASF,KAIVF,GAExBK,GAASN,EAAKS,MAAMJ,EAASF,IFLdO,EAAS,WAC5B,GAEEC,OAAOC,YAAcC,SAASC,gBAAgBC,YAC5CF,SAASC,gBAAgBE,cAC3BrB,EAEA,OAAO,EAGTC,GAAW,KACV,KAuBH,OArBAqB,qBAAU,WACHtB,IAKHG,EADED,EC1BuB,IADJ,QD+BZA,EC9BgB,IDkC3BD,GAAW,MACV,CAACD,IAEJsB,qBAAU,WAER,OADAN,OAAOO,iBAAiB,SAAUnB,GAC3B,kBAAMY,OAAOQ,oBAAoB,SAAUpB,MACjD,IAEI,CAAEF,U,kNGzCJ,IAAMuB,EAAmBC,cAAH,KCQhBC,EAAmB,WAAO,IAC7BzB,EAAUJ,IAAVI,MAD4B,EAEQ0B,mBAASH,GAA7CI,KAF4B,gBAEC,GAFD,GAEpBC,mBAFoB,MAEN,GAFM,EAKpC,OADAC,QAAQC,IAAIF,GAEV,qCACE,cAACpC,EAAD,IACA,eAACE,EAAD,CAAyBqC,eAAa,oBAAtC,UACE,8CACCH,GACCA,EACGI,MAAM,EAAGhC,GACTiC,KAAI,SAAChD,GAAD,OAAW,cAAC,EAAD,CAAsBA,MAAOA,GAAjBA,EAAMiD,e,2ECvBtCT,EAAqBU,EAAQ,KAA7BV,iBAUOW,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAACZ,EAAD,OCOSa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCARQ,EAAS,IAAIC,eAAa,CAC9BC,MAAO,IAAIC,gBAAc,IACzBC,IAAK,+CAGPC,IAASC,OACP,cAAC,iBAAD,CAAgBN,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEF/B,SAASsC,eAAe,SAM1BhB,M","file":"static/js/main.3d41dcdc.chunk.js","sourcesContent":["import axios from \"axios\";\n\nimport { selectFields } from \"../selectors/selectFields\";\n\nexport const baseUrl = \"https://hacker-news.firebaseio.com/v0/\";\nexport const newStoriesUrl = `${baseUrl}newstories.json`;\nexport const storyUrl = `${baseUrl}item/`;\n\nexport const getStory = async (storyId) => {\n  const result = await axios.get(`${storyUrl + storyId}.json`);\n\n  return selectFields(result.data);\n};\n\nexport const getStoryIds = async () => {\n  const result = await axios.get(newStoriesUrl);\n\n  return result.data;\n};\n","import styled from \"styled-components\";\n\nexport const StoryWrapper = styled.section`\n  padding-top: 10px;\n  margin-bottom: 20px;\n  border-top: 1px solid #cccccc;\n\n  &:first-of-type {\n    border-top: 0;\n  }\n\n  &:last-of-type {\n    margin-bottom: 0;\n    padding-bottom: 0;\n  }\n`;\n\nexport const StoryTitle = styled.h1`\n  margin-bottom: 5px;\n  font-size: 18px;\n  line-height: 1.8;\n  margin: 0;\n  text-decoration: none;\n\n  a {\n    color: #2e2e2c;\n    background-color: #f8dc3d;\n    text-decoration: none;\n  }\n`;\n\nexport const StoryMeta = styled.div`\n  font-style: italic;\n\n  > span:first-child {\n    margin-right: 10px;\n  }\n\n  > span:not(:first-child):before {\n    content: 'â€¢'\n    margin: 0 7px;\n  }\n\n  .story__meta-bold {\n    font-weight: bold;\n  }\n`;\n\nexport const StoryMetaElement = styled.span`\n  font-weight: bold;\n  color: ${(props) => props.color};\n`;\n","export const mapTime = (timestamp) => {\n  const seconds = Math.floor((new Date() - timestamp * 1000) / 1000);\n\n  let interval = Math.floor(seconds / 31536000);\n\n  if (interval > 1) {\n    return `${interval} years`;\n  }\n  interval = Math.floor(seconds / 2592000);\n\n  if (interval > 1) {\n    return `${interval} months`;\n  }\n  interval = Math.floor(seconds / 86400);\n\n  if (interval > 1) {\n    return `${interval} days`;\n  }\n  interval = Math.floor(seconds / 3600);\n\n  if (interval > 1) {\n    return `${interval} hours`;\n  }\n  interval = Math.floor(seconds / 60);\n\n  if (interval > 1) {\n    return `${interval} minutes`;\n  }\n\n  return `${Math.floor(seconds)} seconds`;\n};\n","import React from \"react\";\nimport { getStory } from \"../services/api\";\nimport {\n  StoryWrapper,\n  StoryTitle,\n  StoryMeta,\n  StoryMetaElement,\n} from \"../styles/StoryStyles\";\nimport { mapTime } from \"../mappers/mapTime\";\nfunction Story({ story }) {\n  return story && story.url ? (\n    <StoryWrapper data-testid=\"story\">\n      <StoryTitle>\n        <a href={story.url}>{story.title}</a>\n      </StoryTitle>\n      <StoryMeta>\n        <span data-testid=\"story-by\">\n          <StoryMetaElement color=\"#000\">By:</StoryMetaElement> {story.by}\n        </span>\n        <span data-testid=\"story-time\">\n          <StoryMetaElement color=\"#000\">Posted:</StoryMetaElement> {` `}\n          {mapTime(story.time)}\n        </span>\n      </StoryMeta>\n    </StoryWrapper>\n  ) : null;\n}\n\nexport default Story;\n","import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n  }\n  *, *:before, *:after {\n    -webkit-box-sizing: inherit;\n            box-sizing: inherit;\n  }\n\n  body {\n    margin: 0;\n    padding: 0;\n    line-height: 1;\n    color: #202020;\n    background-color: #fafafe;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 16px;\n  }\n\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nexport const StoriesContainerWrapper = styled.main`\n  max-width: 1140px;\n  padding: 20px 15px;\n  margin: auto;\n`;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from \"react\";\nimport { STORY_INCREMENT, MAX_STORIES } from \"../constants\";\nimport { debounce } from \"../utils/debounce\";\n\nexport const useInfiniteScroll = () => {\n  const [loading, setLoading] = useState(false);\n  const [count, setCount] = useState(STORY_INCREMENT);\n\n  const handleScroll = debounce(() => {\n    if (\n      //innerHeight is the height of the tab or frame viewport\n      window.innerHeight + document.documentElement.scrollTop !==\n        document.documentElement.offsetHeight ||\n      loading\n    ) {\n      return false;\n    }\n\n    setLoading(true);\n  }, 500);\n\n  useEffect(() => {\n    if (!loading) return;\n\n    //if we have reached the limit just set the count to all the\n    //stories\n    if (count + STORY_INCREMENT >= MAX_STORIES) {\n      setCount(MAX_STORIES);\n    } else {\n      //otherwise increase the count by the increment\n      setCount(count + STORY_INCREMENT);\n    }\n\n    //return the data\n    setLoading(false);\n  }, [loading]);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  return { count };\n};\n","export const MAX_STORIES = 500;\nexport const STORY_INCREMENT = 30;\n","export const debounce = (func, wait, immediate, args) => {\n  let timeout;\n\n  return () => {\n    const context = this;\n    const callNow = immediate && !timeout;\n    const later = () => {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n\n    if (callNow) func.apply(context, args);\n  };\n};\n","import { gql } from \"@apollo/client\";\n\nexport const GET_ALL_ARTICLES = gql`\n  query getAllArticles {\n    allArticles {\n      id\n      title\n      author\n      url\n      time\n      source\n    }\n  }\n`;\n","import React from \"react\";\nimport { getStoryIds, storyUrl } from \"../services/api\";\nimport Story from \"../components/Story\";\nimport {\n  GlobalStyle,\n  StoriesContainerWrapper,\n} from \"../styles/StoriesContainerStyles\";\nimport { useInfiniteScroll } from \"../hooks/useInfiniteScroll\";\nimport { GET_ALL_ARTICLES } from \"../graphql/get-all-articles\";\nimport { useQuery } from \"@apollo/client\";\nexport const StoriesContainer = () => {\n  const { count } = useInfiniteScroll();\n  const { data: { allArticles = [] } = {} } = useQuery(GET_ALL_ARTICLES);\n\n  console.log(allArticles);\n  return (\n    <>\n      <GlobalStyle />\n      <StoriesContainerWrapper data-test-id=\"stories-container\">\n        <h1>News Stories</h1>\n        {allArticles &&\n          allArticles\n            .slice(0, count)\n            .map((story) => <Story key={story.id} story={story} />)}\n      </StoriesContainerWrapper>\n    </>\n  );\n};\n","const { StoriesContainer } = require(\"./containers/StoriesContainer\");\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <StoriesContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\n\n// Initialize ApolloClient\nconst client = new ApolloClient({\n  cache: new InMemoryCache({}),\n  uri: \"https://news-graphql.herokuapp.com/grahql/\",\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}